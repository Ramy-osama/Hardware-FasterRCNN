// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convo,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.241000,HLS_SYN_LAT=869,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=476,HLS_SYN_LUT=757,HLS_VERSION=2019_2}" *)

module convo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_image_address0,
        input_image_ce0,
        input_image_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        conv_op_address0,
        conv_op_ce0,
        conv_op_we0,
        conv_op_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_image_address0;
output   input_image_ce0;
input  [31:0] input_image_q0;
output  [5:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [2:0] conv_op_address0;
output   conv_op_ce0;
output   conv_op_we0;
output  [31:0] conv_op_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_image_ce0;
reg kernel_ce0;
reg conv_op_ce0;
reg conv_op_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] c_fu_237_p2;
reg   [1:0] c_reg_555;
wire    ap_CS_fsm_state2;
wire  signed [5:0] sext_ln40_fu_265_p1;
reg  signed [5:0] sext_ln40_reg_560;
wire   [0:0] icmp_ln25_fu_231_p2;
wire   [3:0] zext_ln35_1_fu_277_p1;
reg   [3:0] zext_ln35_1_reg_565;
wire   [31:0] zext_ln35_fu_281_p1;
reg   [31:0] zext_ln35_reg_570;
wire    ap_CS_fsm_state3;
wire   [1:0] i_fu_291_p2;
reg   [1:0] i_reg_578;
wire   [4:0] tmp_3_cast_fu_306_p3;
reg   [4:0] tmp_3_cast_reg_583;
wire   [0:0] icmp_ln27_fu_285_p2;
wire   [31:0] zext_ln36_fu_314_p1;
reg   [31:0] zext_ln36_reg_588;
wire    ap_CS_fsm_state4;
wire   [1:0] j_fu_324_p2;
reg   [1:0] j_reg_597;
wire   [31:0] zext_ln42_fu_336_p1;
reg   [31:0] zext_ln42_reg_602;
wire   [0:0] icmp_ln28_fu_318_p2;
wire   [1:0] kchan_fu_346_p2;
reg   [1:0] kchan_reg_610;
wire    ap_CS_fsm_state5;
wire   [4:0] zext_ln40_4_fu_364_p1;
reg   [4:0] zext_ln40_4_reg_615;
wire   [0:0] icmp_ln33_fu_340_p2;
wire   [63:0] sub_ln40_1_fu_389_p2;
reg   [63:0] sub_ln40_1_reg_620;
wire   [1:0] krow_fu_415_p2;
reg   [1:0] krow_reg_628;
wire    ap_CS_fsm_state6;
wire   [6:0] sub_ln40_2_fu_446_p2;
reg   [6:0] sub_ln40_2_reg_633;
wire   [0:0] icmp_ln37_fu_409_p2;
wire   [1:0] kcol_fu_458_p2;
reg   [1:0] kcol_reg_641;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln38_fu_452_p2;
wire   [31:0] irow_2_fu_527_p3;
reg   [31:0] irow_2_reg_656;
wire   [31:0] icol_2_fu_535_p3;
reg   [31:0] icol_2_reg_661;
reg  signed [31:0] kernel_load_reg_666;
wire    ap_CS_fsm_state8;
reg  signed [31:0] input_image_load_reg_671;
wire   [31:0] sum_fu_546_p2;
wire    ap_CS_fsm_state9;
reg   [1:0] filters_reg_83;
reg   [1:0] irow_reg_94;
reg   [1:0] icol_reg_105;
reg   [31:0] sum_0_reg_117;
reg   [1:0] kchan_0_reg_130;
reg   [31:0] sum_1_reg_141;
reg   [31:0] irow1_0_reg_153;
reg   [31:0] icol2_0_reg_163;
reg   [1:0] krow_0_reg_173;
reg   [31:0] sum_2_reg_184;
reg   [31:0] irow1_1_reg_196;
reg   [31:0] icol2_1_reg_208;
reg   [1:0] kcol_0_reg_220;
wire   [63:0] zext_ln52_2_fu_404_p1;
wire   [63:0] zext_ln40_6_fu_473_p1;
wire   [63:0] zext_ln40_7_fu_505_p1;
wire   [3:0] tmp_fu_247_p3;
wire   [4:0] zext_ln40_1_fu_255_p1;
wire   [4:0] zext_ln40_fu_243_p1;
wire   [4:0] sub_ln40_fu_259_p2;
wire   [2:0] tmp_1_fu_269_p3;
wire   [3:0] zext_ln52_fu_297_p1;
wire   [3:0] add_ln52_fu_301_p2;
wire   [1:0] xor_ln42_fu_330_p2;
wire   [3:0] tmp_4_fu_356_p3;
wire   [5:0] zext_ln40_3_fu_352_p1;
wire  signed [5:0] add_ln40_fu_368_p2;
wire   [7:0] tmp_2_fu_377_p3;
wire  signed [63:0] sext_ln40_2_fu_385_p1;
wire  signed [63:0] sext_ln40_1_fu_373_p1;
wire   [4:0] zext_ln52_1_fu_395_p1;
wire   [4:0] add_ln52_1_fu_399_p2;
wire   [63:0] zext_ln40_2_fu_421_p1;
wire   [63:0] add_ln40_1_fu_425_p2;
wire   [4:0] trunc_ln40_1_fu_434_p1;
wire   [6:0] p_shl2_cast_fu_438_p3;
wire   [6:0] trunc_ln40_fu_430_p1;
wire   [6:0] zext_ln40_5_fu_464_p1;
wire   [6:0] add_ln40_2_fu_468_p2;
wire   [4:0] trunc_ln40_3_fu_482_p1;
wire   [4:0] add_ln40_3_fu_486_p2;
wire   [6:0] tmp_8_cast_fu_491_p3;
wire   [6:0] trunc_ln40_2_fu_478_p1;
wire   [6:0] add_ln40_4_fu_499_p2;
wire   [0:0] icmp_ln42_fu_510_p2;
wire   [31:0] irow_1_fu_515_p2;
wire   [31:0] icol_1_fu_521_p2;
wire   [31:0] mul_fu_542_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        filters_reg_83 <= c_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        filters_reg_83 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln38_fu_452_p2 == 1'd1))) begin
        icol2_0_reg_163 <= icol2_1_reg_208;
    end else if (((icmp_ln33_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icol2_0_reg_163 <= zext_ln36_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icol2_1_reg_208 <= icol2_0_reg_163;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        icol2_1_reg_208 <= icol_2_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icol_reg_105 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_340_p2 == 1'd1))) begin
        icol_reg_105 <= j_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln38_fu_452_p2 == 1'd1))) begin
        irow1_0_reg_153 <= irow1_1_reg_196;
    end else if (((icmp_ln33_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        irow1_0_reg_153 <= zext_ln35_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        irow1_1_reg_196 <= irow1_0_reg_153;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        irow1_1_reg_196 <= irow_2_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        irow_reg_94 <= i_reg_578;
    end else if (((icmp_ln25_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        irow_reg_94 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln37_fu_409_p2 == 1'd1))) begin
        kchan_0_reg_130 <= kchan_reg_610;
    end else if (((icmp_ln28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kchan_0_reg_130 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        kcol_0_reg_220 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kcol_0_reg_220 <= kcol_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln38_fu_452_p2 == 1'd1))) begin
        krow_0_reg_173 <= krow_reg_628;
    end else if (((icmp_ln33_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        krow_0_reg_173 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln37_fu_409_p2 == 1'd1))) begin
        sum_0_reg_117 <= sum_1_reg_141;
    end else if (((icmp_ln28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_reg_117 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln38_fu_452_p2 == 1'd1))) begin
        sum_1_reg_141 <= sum_2_reg_184;
    end else if (((icmp_ln33_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_1_reg_141 <= sum_0_reg_117;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_2_reg_184 <= sum_1_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_2_reg_184 <= sum_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_555 <= c_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_578 <= i_fu_291_p2;
        zext_ln35_reg_570[1 : 0] <= zext_ln35_fu_281_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        icol_2_reg_661 <= icol_2_fu_535_p3;
        irow_2_reg_656 <= irow_2_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_image_load_reg_671 <= input_image_q0;
        kernel_load_reg_666 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_597 <= j_fu_324_p2;
        zext_ln36_reg_588[1 : 0] <= zext_ln36_fu_314_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kchan_reg_610 <= kchan_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kcol_reg_641 <= kcol_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        krow_reg_628 <= krow_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_231_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln40_reg_560 <= sext_ln40_fu_265_p1;
        zext_ln35_1_reg_565[2 : 1] <= zext_ln35_1_fu_277_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln40_1_reg_620 <= sub_ln40_1_fu_389_p2;
        zext_ln40_4_reg_615[3 : 2] <= zext_ln40_4_fu_364_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln40_2_reg_633 <= sub_ln40_2_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_cast_reg_583[4 : 1] <= tmp_3_cast_fu_306_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln42_reg_602[1 : 0] <= zext_ln42_fu_336_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_op_ce0 = 1'b1;
    end else begin
        conv_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_340_p2 == 1'd1))) begin
        conv_op_we0 = 1'b1;
    end else begin
        conv_op_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_image_ce0 = 1'b1;
    end else begin
        input_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln27_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln28_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_340_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln37_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln38_fu_452_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_425_p2 = (sub_ln40_1_reg_620 + zext_ln40_2_fu_421_p1);

assign add_ln40_2_fu_468_p2 = (sub_ln40_2_reg_633 + zext_ln40_5_fu_464_p1);

assign add_ln40_3_fu_486_p2 = (zext_ln40_4_reg_615 + trunc_ln40_3_fu_482_p1);

assign add_ln40_4_fu_499_p2 = (tmp_8_cast_fu_491_p3 + trunc_ln40_2_fu_478_p1);

assign add_ln40_fu_368_p2 = ($signed(zext_ln40_3_fu_352_p1) + $signed(sext_ln40_reg_560));

assign add_ln52_1_fu_399_p2 = (tmp_3_cast_reg_583 + zext_ln52_1_fu_395_p1);

assign add_ln52_fu_301_p2 = (zext_ln52_fu_297_p1 + zext_ln35_1_reg_565);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_237_p2 = (filters_reg_83 + 2'd1);

assign conv_op_address0 = zext_ln52_2_fu_404_p1;

assign conv_op_d0 = sum_0_reg_117;

assign i_fu_291_p2 = (irow_reg_94 + 2'd1);

assign icmp_ln25_fu_231_p2 = ((filters_reg_83 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_285_p2 = ((irow_reg_94 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_318_p2 = ((icol_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_340_p2 = ((kchan_0_reg_130 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_409_p2 = ((krow_0_reg_173 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_452_p2 = ((kcol_0_reg_220 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_510_p2 = ((icol2_1_reg_208 == zext_ln42_reg_602) ? 1'b1 : 1'b0);

assign icol_1_fu_521_p2 = (32'd1 + icol2_1_reg_208);

assign icol_2_fu_535_p3 = ((icmp_ln42_fu_510_p2[0:0] === 1'b1) ? zext_ln36_reg_588 : icol_1_fu_521_p2);

assign input_image_address0 = zext_ln40_7_fu_505_p1;

assign irow_1_fu_515_p2 = (32'd1 + irow1_1_reg_196);

assign irow_2_fu_527_p3 = ((icmp_ln42_fu_510_p2[0:0] === 1'b1) ? irow_1_fu_515_p2 : irow1_1_reg_196);

assign j_fu_324_p2 = (icol_reg_105 + 2'd1);

assign kchan_fu_346_p2 = (kchan_0_reg_130 + 2'd1);

assign kcol_fu_458_p2 = (kcol_0_reg_220 + 2'd1);

assign kernel_address0 = zext_ln40_6_fu_473_p1;

assign krow_fu_415_p2 = (krow_0_reg_173 + 2'd1);

assign mul_fu_542_p2 = ($signed(input_image_load_reg_671) * $signed(kernel_load_reg_666));

assign p_shl2_cast_fu_438_p3 = {{trunc_ln40_1_fu_434_p1}, {2'd0}};

assign sext_ln40_1_fu_373_p1 = add_ln40_fu_368_p2;

assign sext_ln40_2_fu_385_p1 = $signed(tmp_2_fu_377_p3);

assign sext_ln40_fu_265_p1 = $signed(sub_ln40_fu_259_p2);

assign sub_ln40_1_fu_389_p2 = ($signed(sext_ln40_2_fu_385_p1) - $signed(sext_ln40_1_fu_373_p1));

assign sub_ln40_2_fu_446_p2 = (p_shl2_cast_fu_438_p3 - trunc_ln40_fu_430_p1);

assign sub_ln40_fu_259_p2 = (zext_ln40_1_fu_255_p1 - zext_ln40_fu_243_p1);

assign sum_fu_546_p2 = (sum_2_reg_184 + mul_fu_542_p2);

assign tmp_1_fu_269_p3 = {{filters_reg_83}, {1'd0}};

assign tmp_2_fu_377_p3 = {{add_ln40_fu_368_p2}, {2'd0}};

assign tmp_3_cast_fu_306_p3 = {{add_ln52_fu_301_p2}, {1'd0}};

assign tmp_4_fu_356_p3 = {{kchan_0_reg_130}, {2'd0}};

assign tmp_8_cast_fu_491_p3 = {{add_ln40_3_fu_486_p2}, {2'd0}};

assign tmp_fu_247_p3 = {{filters_reg_83}, {2'd0}};

assign trunc_ln40_1_fu_434_p1 = add_ln40_1_fu_425_p2[4:0];

assign trunc_ln40_2_fu_478_p1 = icol2_1_reg_208[6:0];

assign trunc_ln40_3_fu_482_p1 = irow1_1_reg_196[4:0];

assign trunc_ln40_fu_430_p1 = add_ln40_1_fu_425_p2[6:0];

assign xor_ln42_fu_330_p2 = (icol_reg_105 ^ 2'd2);

assign zext_ln35_1_fu_277_p1 = tmp_1_fu_269_p3;

assign zext_ln35_fu_281_p1 = irow_reg_94;

assign zext_ln36_fu_314_p1 = icol_reg_105;

assign zext_ln40_1_fu_255_p1 = tmp_fu_247_p3;

assign zext_ln40_2_fu_421_p1 = krow_0_reg_173;

assign zext_ln40_3_fu_352_p1 = kchan_0_reg_130;

assign zext_ln40_4_fu_364_p1 = tmp_4_fu_356_p3;

assign zext_ln40_5_fu_464_p1 = kcol_0_reg_220;

assign zext_ln40_6_fu_473_p1 = add_ln40_2_fu_468_p2;

assign zext_ln40_7_fu_505_p1 = add_ln40_4_fu_499_p2;

assign zext_ln40_fu_243_p1 = filters_reg_83;

assign zext_ln42_fu_336_p1 = xor_ln42_fu_330_p2;

assign zext_ln52_1_fu_395_p1 = icol_reg_105;

assign zext_ln52_2_fu_404_p1 = add_ln52_1_fu_399_p2;

assign zext_ln52_fu_297_p1 = irow_reg_94;

always @ (posedge ap_clk) begin
    zext_ln35_1_reg_565[0] <= 1'b0;
    zext_ln35_1_reg_565[3] <= 1'b0;
    zext_ln35_reg_570[31:2] <= 30'b000000000000000000000000000000;
    tmp_3_cast_reg_583[0] <= 1'b0;
    zext_ln36_reg_588[31:2] <= 30'b000000000000000000000000000000;
    zext_ln42_reg_602[31:2] <= 30'b000000000000000000000000000000;
    zext_ln40_4_reg_615[1:0] <= 2'b00;
    zext_ln40_4_reg_615[4] <= 1'b0;
end

endmodule //convo
