// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convo,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.241000,HLS_SYN_LAT=3781,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=3,HLS_SYN_FF=944,HLS_SYN_LUT=2186,HLS_VERSION=2019_2}" *)

module convo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_image_address0,
        input_image_ce0,
        input_image_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        conv_op_address0,
        conv_op_ce0,
        conv_op_we0,
        conv_op_d0,
        conv_op_q0,
        conv_op_address1,
        conv_op_ce1,
        conv_op_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_image_address0;
output   input_image_ce0;
input  [31:0] input_image_q0;
output  [5:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [4:0] conv_op_address0;
output   conv_op_ce0;
output   conv_op_we0;
output  [31:0] conv_op_d0;
input  [31:0] conv_op_q0;
output  [4:0] conv_op_address1;
output   conv_op_ce1;
input  [31:0] conv_op_q1;
output  [2:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_ce0;
reg[4:0] conv_op_address0;
reg conv_op_ce0;
reg conv_op_we0;
reg conv_op_ce1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln18_fu_322_p2;
reg   [1:0] add_ln18_reg_794;
wire    ap_CS_fsm_state2;
wire  signed [6:0] sext_ln18_fu_358_p1;
reg  signed [6:0] sext_ln18_reg_799;
wire   [2:0] add_ln18_1_fu_362_p2;
reg   [2:0] add_ln18_1_reg_804;
wire    ap_CS_fsm_state3;
wire   [7:0] sub_ln18_2_fu_397_p2;
reg   [7:0] sub_ln18_2_reg_809;
wire   [2:0] add_ln18_2_fu_403_p2;
wire    ap_CS_fsm_state4;
wire   [1:0] c_fu_447_p2;
reg   [1:0] c_reg_831;
wire    ap_CS_fsm_state7;
wire   [4:0] zext_ln36_1_fu_465_p1;
reg   [4:0] zext_ln36_1_reg_836;
wire   [0:0] icmp_ln21_fu_441_p2;
wire  signed [5:0] sext_ln36_fu_475_p1;
reg  signed [5:0] sext_ln36_reg_841;
wire   [31:0] zext_ln31_fu_479_p1;
reg   [31:0] zext_ln31_reg_846;
wire    ap_CS_fsm_state8;
wire   [2:0] i_fu_489_p2;
reg   [2:0] i_reg_854;
wire   [6:0] tmp_13_cast_fu_504_p3;
reg   [6:0] tmp_13_cast_reg_859;
wire   [0:0] icmp_ln23_fu_483_p2;
wire   [31:0] zext_ln32_fu_512_p1;
reg   [31:0] zext_ln32_reg_864;
wire    ap_CS_fsm_state9;
wire   [2:0] j_fu_522_p2;
reg   [2:0] j_reg_873;
wire   [31:0] zext_ln38_fu_534_p1;
reg   [31:0] zext_ln38_reg_878;
wire   [0:0] icmp_ln24_fu_516_p2;
wire   [1:0] kchan_fu_544_p2;
reg   [1:0] kchan_reg_886;
wire    ap_CS_fsm_state10;
wire   [63:0] sub_ln36_1_fu_575_p2;
reg   [63:0] sub_ln36_1_reg_891;
wire   [0:0] icmp_ln29_fu_538_p2;
wire  signed [32:0] sext_ln36_3_fu_611_p1;
reg  signed [32:0] sext_ln36_3_reg_896;
wire   [1:0] krow_fu_635_p2;
reg   [1:0] krow_reg_904;
wire    ap_CS_fsm_state11;
wire   [6:0] sub_ln36_3_fu_666_p2;
reg   [6:0] sub_ln36_3_reg_909;
wire   [0:0] icmp_ln33_fu_629_p2;
wire   [1:0] kcol_fu_678_p2;
reg   [1:0] kcol_reg_917;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln34_fu_672_p2;
wire   [31:0] irow_2_fu_769_p3;
reg   [31:0] irow_2_reg_932;
wire   [31:0] icol_2_fu_777_p3;
reg   [31:0] icol_2_reg_937;
reg  signed [31:0] kernel_load_reg_942;
wire    ap_CS_fsm_state13;
wire   [31:0] matrix_paded_q0;
reg  signed [31:0] matrix_paded_load_reg_947;
wire   [31:0] sum_fu_788_p2;
wire    ap_CS_fsm_state14;
reg   [6:0] matrix_paded_address0;
reg    matrix_paded_ce0;
reg    matrix_paded_we0;
reg   [31:0] matrix_paded_d0;
wire    grp_Max_Pooling_fu_307_ap_start;
wire    grp_Max_Pooling_fu_307_ap_done;
wire    grp_Max_Pooling_fu_307_ap_idle;
wire    grp_Max_Pooling_fu_307_ap_ready;
wire   [4:0] grp_Max_Pooling_fu_307_image_r_address0;
wire    grp_Max_Pooling_fu_307_image_r_ce0;
wire   [4:0] grp_Max_Pooling_fu_307_image_r_address1;
wire    grp_Max_Pooling_fu_307_image_r_ce1;
wire   [2:0] grp_Max_Pooling_fu_307_out_r_address0;
wire    grp_Max_Pooling_fu_307_out_r_ce0;
wire    grp_Max_Pooling_fu_307_out_r_we0;
wire   [31:0] grp_Max_Pooling_fu_307_out_r_d0;
wire    grp_matrixpadding_fu_315_ap_start;
wire    grp_matrixpadding_fu_315_ap_done;
wire    grp_matrixpadding_fu_315_ap_idle;
wire    grp_matrixpadding_fu_315_ap_ready;
wire   [5:0] grp_matrixpadding_fu_315_matrix_input_address0;
wire    grp_matrixpadding_fu_315_matrix_input_ce0;
wire   [6:0] grp_matrixpadding_fu_315_matrix_paded_address0;
wire    grp_matrixpadding_fu_315_matrix_paded_ce0;
wire    grp_matrixpadding_fu_315_matrix_paded_we0;
wire   [31:0] grp_matrixpadding_fu_315_matrix_paded_d0;
reg   [1:0] phi_ln18_reg_124;
wire   [0:0] icmp_ln18_fu_423_p2;
wire   [0:0] icmp_ln18_1_fu_429_p2;
wire   [0:0] icmp_ln18_2_fu_435_p2;
reg   [2:0] phi_ln18_1_reg_136;
reg   [2:0] phi_ln18_2_reg_148;
reg   [1:0] filters_reg_159;
wire    ap_CS_fsm_state6;
reg   [2:0] irow_reg_170;
reg   [2:0] icol_reg_181;
reg   [31:0] sum_0_reg_193;
reg   [1:0] kchan_0_reg_206;
reg   [31:0] sum_1_reg_217;
reg   [31:0] irow1_0_reg_229;
reg   [31:0] icol2_0_reg_239;
reg   [1:0] krow_0_reg_249;
reg   [31:0] sum_2_reg_260;
reg  signed [31:0] irow1_1_reg_272;
reg   [31:0] icol2_1_reg_284;
reg   [1:0] kcol_0_reg_296;
reg    grp_Max_Pooling_fu_307_ap_start_reg;
wire    ap_CS_fsm_state15;
reg    grp_matrixpadding_fu_315_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln18_12_fu_418_p1;
wire   [63:0] zext_ln48_2_fu_624_p1;
wire   [63:0] zext_ln36_7_fu_693_p1;
wire   [63:0] zext_ln36_8_fu_747_p1;
wire   [4:0] tmp_fu_328_p3;
wire   [2:0] tmp_7_fu_340_p3;
wire   [5:0] zext_ln18_fu_336_p1;
wire   [5:0] zext_ln18_9_fu_348_p1;
wire   [5:0] sub_ln18_fu_352_p2;
wire   [6:0] zext_ln18_10_fu_368_p1;
wire   [6:0] add_ln18_4_fu_372_p2;
wire   [4:0] trunc_ln18_fu_377_p1;
wire   [7:0] p_shl2_cast_fu_381_p3;
wire   [7:0] p_shl3_cast_fu_389_p3;
wire   [7:0] zext_ln18_11_fu_409_p1;
wire   [7:0] add_ln18_5_fu_413_p2;
wire   [3:0] tmp_s_fu_457_p3;
wire   [4:0] zext_ln36_fu_453_p1;
wire   [4:0] sub_ln36_fu_469_p2;
wire   [4:0] zext_ln48_fu_495_p1;
wire   [4:0] add_ln48_fu_499_p2;
wire   [2:0] add_ln38_fu_528_p2;
wire   [5:0] zext_ln36_3_fu_550_p1;
wire  signed [5:0] add_ln36_fu_554_p2;
wire   [7:0] tmp_1_fu_563_p3;
wire  signed [63:0] sext_ln36_2_fu_571_p1;
wire  signed [63:0] sext_ln36_1_fu_559_p1;
wire   [4:0] tmp_2_fu_581_p3;
wire   [2:0] tmp_3_fu_593_p3;
wire   [5:0] zext_ln36_4_fu_589_p1;
wire   [5:0] zext_ln36_5_fu_601_p1;
wire   [5:0] sub_ln36_2_fu_605_p2;
wire   [6:0] zext_ln48_1_fu_615_p1;
wire   [6:0] add_ln48_1_fu_619_p2;
wire   [63:0] zext_ln36_2_fu_641_p1;
wire   [63:0] add_ln36_1_fu_645_p2;
wire   [4:0] trunc_ln36_1_fu_654_p1;
wire   [6:0] p_shl8_cast_fu_658_p3;
wire   [6:0] trunc_ln36_fu_650_p1;
wire   [6:0] zext_ln36_6_fu_684_p1;
wire   [6:0] add_ln36_2_fu_688_p2;
wire  signed [32:0] sext_ln36_4_fu_702_p1;
wire   [32:0] add_ln36_3_fu_706_p2;
wire   [4:0] trunc_ln36_3_fu_711_p1;
wire   [6:0] trunc_ln36_4_fu_723_p1;
wire   [7:0] p_shl9_cast_fu_715_p3;
wire   [7:0] p_shl_cast_fu_727_p3;
wire   [7:0] trunc_ln36_2_fu_698_p1;
wire   [7:0] sub_ln36_4_fu_735_p2;
wire   [7:0] add_ln36_4_fu_741_p2;
wire   [0:0] icmp_ln38_fu_752_p2;
wire   [31:0] irow_1_fu_757_p2;
wire   [31:0] icol_1_fu_763_p2;
wire   [31:0] mul_fu_784_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 grp_Max_Pooling_fu_307_ap_start_reg = 1'b0;
#0 grp_matrixpadding_fu_315_ap_start_reg = 1'b0;
end

convo_matrix_paded #(
    .DataWidth( 32 ),
    .AddressRange( 108 ),
    .AddressWidth( 7 ))
matrix_paded_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(matrix_paded_address0),
    .ce0(matrix_paded_ce0),
    .we0(matrix_paded_we0),
    .d0(matrix_paded_d0),
    .q0(matrix_paded_q0)
);

Max_Pooling grp_Max_Pooling_fu_307(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Max_Pooling_fu_307_ap_start),
    .ap_done(grp_Max_Pooling_fu_307_ap_done),
    .ap_idle(grp_Max_Pooling_fu_307_ap_idle),
    .ap_ready(grp_Max_Pooling_fu_307_ap_ready),
    .image_r_address0(grp_Max_Pooling_fu_307_image_r_address0),
    .image_r_ce0(grp_Max_Pooling_fu_307_image_r_ce0),
    .image_r_q0(conv_op_q0),
    .image_r_address1(grp_Max_Pooling_fu_307_image_r_address1),
    .image_r_ce1(grp_Max_Pooling_fu_307_image_r_ce1),
    .image_r_q1(conv_op_q1),
    .out_r_address0(grp_Max_Pooling_fu_307_out_r_address0),
    .out_r_ce0(grp_Max_Pooling_fu_307_out_r_ce0),
    .out_r_we0(grp_Max_Pooling_fu_307_out_r_we0),
    .out_r_d0(grp_Max_Pooling_fu_307_out_r_d0)
);

matrixpadding grp_matrixpadding_fu_315(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixpadding_fu_315_ap_start),
    .ap_done(grp_matrixpadding_fu_315_ap_done),
    .ap_idle(grp_matrixpadding_fu_315_ap_idle),
    .ap_ready(grp_matrixpadding_fu_315_ap_ready),
    .matrix_input_address0(grp_matrixpadding_fu_315_matrix_input_address0),
    .matrix_input_ce0(grp_matrixpadding_fu_315_matrix_input_ce0),
    .matrix_input_q0(input_image_q0),
    .matrix_paded_address0(grp_matrixpadding_fu_315_matrix_paded_address0),
    .matrix_paded_ce0(grp_matrixpadding_fu_315_matrix_paded_ce0),
    .matrix_paded_we0(grp_matrixpadding_fu_315_matrix_paded_we0),
    .matrix_paded_d0(grp_matrixpadding_fu_315_matrix_paded_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Max_Pooling_fu_307_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln21_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_Max_Pooling_fu_307_ap_start_reg <= 1'b1;
        end else if ((grp_Max_Pooling_fu_307_ap_ready == 1'b1)) begin
            grp_Max_Pooling_fu_307_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixpadding_fu_315_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_matrixpadding_fu_315_ap_start_reg <= 1'b1;
        end else if ((grp_matrixpadding_fu_315_ap_ready == 1'b1)) begin
            grp_matrixpadding_fu_315_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_fu_483_p2 == 1'd1))) begin
        filters_reg_159 <= c_reg_831;
    end else if (((grp_matrixpadding_fu_315_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        filters_reg_159 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd1))) begin
        icol2_0_reg_239 <= icol2_1_reg_284;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd0))) begin
        icol2_0_reg_239 <= zext_ln32_reg_864;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd0))) begin
        icol2_1_reg_284 <= icol2_0_reg_239;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        icol2_1_reg_284 <= icol_2_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_fu_483_p2 == 1'd0))) begin
        icol_reg_181 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd1))) begin
        icol_reg_181 <= j_reg_873;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd1))) begin
        irow1_0_reg_229 <= irow1_1_reg_272;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd0))) begin
        irow1_0_reg_229 <= zext_ln31_reg_846;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd0))) begin
        irow1_1_reg_272 <= irow1_0_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        irow1_1_reg_272 <= irow_2_reg_932;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln24_fu_516_p2 == 1'd1))) begin
        irow_reg_170 <= i_reg_854;
    end else if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        irow_reg_170 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd1))) begin
        kchan_0_reg_206 <= kchan_reg_886;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln24_fu_516_p2 == 1'd0))) begin
        kchan_0_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd0))) begin
        kcol_0_reg_296 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        kcol_0_reg_296 <= kcol_reg_917;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd1))) begin
        krow_0_reg_249 <= krow_reg_904;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd0))) begin
        krow_0_reg_249 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln18_1_fu_429_p2 == 1'd0))) begin
        phi_ln18_1_reg_136 <= add_ln18_1_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln18_1_reg_136 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_423_p2 == 1'd0))) begin
        phi_ln18_2_reg_148 <= add_ln18_2_fu_403_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_ln18_2_reg_148 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_1_fu_429_p2 == 1'd1) & (icmp_ln18_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln18_2_fu_435_p2 == 1'd0))) begin
        phi_ln18_reg_124 <= add_ln18_reg_794;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln18_reg_124 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd1))) begin
        sum_0_reg_193 <= sum_1_reg_217;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln24_fu_516_p2 == 1'd0))) begin
        sum_0_reg_193 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd1))) begin
        sum_1_reg_217 <= sum_2_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd0))) begin
        sum_1_reg_217 <= sum_0_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd0))) begin
        sum_2_reg_260 <= sum_1_reg_217;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_2_reg_260 <= sum_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_1_reg_804 <= add_ln18_1_fu_362_p2;
        sub_ln18_2_reg_809[7 : 1] <= sub_ln18_2_fu_397_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_794 <= add_ln18_fu_322_p2;
        sext_ln18_reg_799[6 : 1] <= sext_ln18_fu_358_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_reg_831 <= c_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_854 <= i_fu_489_p2;
        zext_ln31_reg_846[2 : 0] <= zext_ln31_fu_479_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd0))) begin
        icol_2_reg_937 <= icol_2_fu_777_p3;
        irow_2_reg_932 <= irow_2_fu_769_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_873 <= j_fu_522_p2;
        zext_ln32_reg_864[2 : 0] <= zext_ln32_fu_512_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kchan_reg_886 <= kchan_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        kcol_reg_917 <= kcol_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        kernel_load_reg_942 <= kernel_q0;
        matrix_paded_load_reg_947 <= matrix_paded_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        krow_reg_904 <= krow_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd0))) begin
        sext_ln36_3_reg_896[32 : 1] <= sext_ln36_3_fu_611_p1[32 : 1];
        sub_ln36_1_reg_891 <= sub_ln36_1_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln36_reg_841 <= sext_ln36_fu_475_p1;
        zext_ln36_1_reg_836[3 : 2] <= zext_ln36_1_fu_465_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd0))) begin
        sub_ln36_3_reg_909 <= sub_ln36_3_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_fu_483_p2 == 1'd0))) begin
        tmp_13_cast_reg_859[6 : 2] <= tmp_13_cast_fu_504_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln24_fu_516_p2 == 1'd0))) begin
        zext_ln38_reg_878[2 : 0] <= zext_ln38_fu_534_p1[2 : 0];
    end
end

always @ (*) begin
    if (((grp_Max_Pooling_fu_307_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Max_Pooling_fu_307_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_op_address0 = zext_ln48_2_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_op_address0 = grp_Max_Pooling_fu_307_image_r_address0;
    end else begin
        conv_op_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_op_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_op_ce0 = grp_Max_Pooling_fu_307_image_r_ce0;
    end else begin
        conv_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_op_ce1 = grp_Max_Pooling_fu_307_image_r_ce1;
    end else begin
        conv_op_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd1))) begin
        conv_op_we0 = 1'b1;
    end else begin
        conv_op_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        matrix_paded_address0 = zext_ln36_8_fu_747_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        matrix_paded_address0 = zext_ln18_12_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_paded_address0 = grp_matrixpadding_fu_315_matrix_paded_address0;
    end else begin
        matrix_paded_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        matrix_paded_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_paded_ce0 = grp_matrixpadding_fu_315_matrix_paded_ce0;
    end else begin
        matrix_paded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        matrix_paded_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_paded_d0 = grp_matrixpadding_fu_315_matrix_paded_d0;
    end else begin
        matrix_paded_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        matrix_paded_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_paded_we0 = grp_matrixpadding_fu_315_matrix_paded_we0;
    end else begin
        matrix_paded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln18_2_fu_435_p2 == 1'd1) & (icmp_ln18_1_fu_429_p2 == 1'd1) & (icmp_ln18_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((icmp_ln18_1_fu_429_p2 == 1'd1) & (icmp_ln18_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln18_2_fu_435_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln18_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln18_1_fu_429_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_matrixpadding_fu_315_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln21_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln23_fu_483_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln24_fu_516_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln29_fu_538_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_629_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln34_fu_672_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_Max_Pooling_fu_307_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_362_p2 = (3'd1 + phi_ln18_1_reg_136);

assign add_ln18_2_fu_403_p2 = (phi_ln18_2_reg_148 + 3'd1);

assign add_ln18_4_fu_372_p2 = ($signed(zext_ln18_10_fu_368_p1) + $signed(sext_ln18_reg_799));

assign add_ln18_5_fu_413_p2 = (sub_ln18_2_reg_809 + zext_ln18_11_fu_409_p1);

assign add_ln18_fu_322_p2 = (phi_ln18_reg_124 + 2'd1);

assign add_ln36_1_fu_645_p2 = (sub_ln36_1_reg_891 + zext_ln36_2_fu_641_p1);

assign add_ln36_2_fu_688_p2 = (zext_ln36_6_fu_684_p1 + sub_ln36_3_reg_909);

assign add_ln36_3_fu_706_p2 = ($signed(sext_ln36_4_fu_702_p1) + $signed(sext_ln36_3_reg_896));

assign add_ln36_4_fu_741_p2 = (trunc_ln36_2_fu_698_p1 + sub_ln36_4_fu_735_p2);

assign add_ln36_fu_554_p2 = ($signed(sext_ln36_reg_841) + $signed(zext_ln36_3_fu_550_p1));

assign add_ln38_fu_528_p2 = (icol_reg_181 + 3'd2);

assign add_ln48_1_fu_619_p2 = (tmp_13_cast_reg_859 + zext_ln48_1_fu_615_p1);

assign add_ln48_fu_499_p2 = (zext_ln48_fu_495_p1 + zext_ln36_1_reg_836);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_447_p2 = (filters_reg_159 + 2'd1);

assign conv_op_address1 = grp_Max_Pooling_fu_307_image_r_address1;

assign conv_op_d0 = sum_0_reg_193;

assign grp_Max_Pooling_fu_307_ap_start = grp_Max_Pooling_fu_307_ap_start_reg;

assign grp_matrixpadding_fu_315_ap_start = grp_matrixpadding_fu_315_ap_start_reg;

assign i_fu_489_p2 = (irow_reg_170 + 3'd1);

assign icmp_ln18_1_fu_429_p2 = ((phi_ln18_1_reg_136 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln18_2_fu_435_p2 = ((phi_ln18_reg_124 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_423_p2 = ((phi_ln18_2_reg_148 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_441_p2 = ((filters_reg_159 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_483_p2 = ((irow_reg_170 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_516_p2 = ((icol_reg_181 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_538_p2 = ((kchan_0_reg_206 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_629_p2 = ((krow_0_reg_249 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_672_p2 = ((kcol_0_reg_296 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_752_p2 = ((icol2_1_reg_284 == zext_ln38_reg_878) ? 1'b1 : 1'b0);

assign icol_1_fu_763_p2 = (32'd1 + icol2_1_reg_284);

assign icol_2_fu_777_p3 = ((icmp_ln38_fu_752_p2[0:0] === 1'b1) ? zext_ln32_reg_864 : icol_1_fu_763_p2);

assign input_image_address0 = grp_matrixpadding_fu_315_matrix_input_address0;

assign input_image_ce0 = grp_matrixpadding_fu_315_matrix_input_ce0;

assign irow_1_fu_757_p2 = ($signed(32'd1) + $signed(irow1_1_reg_272));

assign irow_2_fu_769_p3 = ((icmp_ln38_fu_752_p2[0:0] === 1'b1) ? irow_1_fu_757_p2 : irow1_1_reg_272);

assign j_fu_522_p2 = (icol_reg_181 + 3'd1);

assign kchan_fu_544_p2 = (kchan_0_reg_206 + 2'd1);

assign kcol_fu_678_p2 = (kcol_0_reg_296 + 2'd1);

assign kernel_address0 = zext_ln36_7_fu_693_p1;

assign krow_fu_635_p2 = (krow_0_reg_249 + 2'd1);

assign mul_fu_784_p2 = ($signed(kernel_load_reg_942) * $signed(matrix_paded_load_reg_947));

assign out_r_address0 = grp_Max_Pooling_fu_307_out_r_address0;

assign out_r_ce0 = grp_Max_Pooling_fu_307_out_r_ce0;

assign out_r_d0 = grp_Max_Pooling_fu_307_out_r_d0;

assign out_r_we0 = grp_Max_Pooling_fu_307_out_r_we0;

assign p_shl2_cast_fu_381_p3 = {{trunc_ln18_fu_377_p1}, {3'd0}};

assign p_shl3_cast_fu_389_p3 = {{add_ln18_4_fu_372_p2}, {1'd0}};

assign p_shl8_cast_fu_658_p3 = {{trunc_ln36_1_fu_654_p1}, {2'd0}};

assign p_shl9_cast_fu_715_p3 = {{trunc_ln36_3_fu_711_p1}, {3'd0}};

assign p_shl_cast_fu_727_p3 = {{trunc_ln36_4_fu_723_p1}, {1'd0}};

assign sext_ln18_fu_358_p1 = $signed(sub_ln18_fu_352_p2);

assign sext_ln36_1_fu_559_p1 = add_ln36_fu_554_p2;

assign sext_ln36_2_fu_571_p1 = $signed(tmp_1_fu_563_p3);

assign sext_ln36_3_fu_611_p1 = $signed(sub_ln36_2_fu_605_p2);

assign sext_ln36_4_fu_702_p1 = irow1_1_reg_272;

assign sext_ln36_fu_475_p1 = $signed(sub_ln36_fu_469_p2);

assign sub_ln18_2_fu_397_p2 = (p_shl2_cast_fu_381_p3 - p_shl3_cast_fu_389_p3);

assign sub_ln18_fu_352_p2 = (zext_ln18_fu_336_p1 - zext_ln18_9_fu_348_p1);

assign sub_ln36_1_fu_575_p2 = ($signed(sext_ln36_2_fu_571_p1) - $signed(sext_ln36_1_fu_559_p1));

assign sub_ln36_2_fu_605_p2 = (zext_ln36_4_fu_589_p1 - zext_ln36_5_fu_601_p1);

assign sub_ln36_3_fu_666_p2 = (p_shl8_cast_fu_658_p3 - trunc_ln36_fu_650_p1);

assign sub_ln36_4_fu_735_p2 = (p_shl9_cast_fu_715_p3 - p_shl_cast_fu_727_p3);

assign sub_ln36_fu_469_p2 = (zext_ln36_1_fu_465_p1 - zext_ln36_fu_453_p1);

assign sum_fu_788_p2 = (mul_fu_784_p2 + sum_2_reg_260);

assign tmp_13_cast_fu_504_p3 = {{add_ln48_fu_499_p2}, {2'd0}};

assign tmp_1_fu_563_p3 = {{add_ln36_fu_554_p2}, {2'd0}};

assign tmp_2_fu_581_p3 = {{kchan_0_reg_206}, {3'd0}};

assign tmp_3_fu_593_p3 = {{kchan_0_reg_206}, {1'd0}};

assign tmp_7_fu_340_p3 = {{phi_ln18_reg_124}, {1'd0}};

assign tmp_fu_328_p3 = {{phi_ln18_reg_124}, {3'd0}};

assign tmp_s_fu_457_p3 = {{filters_reg_159}, {2'd0}};

assign trunc_ln18_fu_377_p1 = add_ln18_4_fu_372_p2[4:0];

assign trunc_ln36_1_fu_654_p1 = add_ln36_1_fu_645_p2[4:0];

assign trunc_ln36_2_fu_698_p1 = icol2_1_reg_284[7:0];

assign trunc_ln36_3_fu_711_p1 = add_ln36_3_fu_706_p2[4:0];

assign trunc_ln36_4_fu_723_p1 = add_ln36_3_fu_706_p2[6:0];

assign trunc_ln36_fu_650_p1 = add_ln36_1_fu_645_p2[6:0];

assign zext_ln18_10_fu_368_p1 = phi_ln18_1_reg_136;

assign zext_ln18_11_fu_409_p1 = phi_ln18_2_reg_148;

assign zext_ln18_12_fu_418_p1 = add_ln18_5_fu_413_p2;

assign zext_ln18_9_fu_348_p1 = tmp_7_fu_340_p3;

assign zext_ln18_fu_336_p1 = tmp_fu_328_p3;

assign zext_ln31_fu_479_p1 = irow_reg_170;

assign zext_ln32_fu_512_p1 = icol_reg_181;

assign zext_ln36_1_fu_465_p1 = tmp_s_fu_457_p3;

assign zext_ln36_2_fu_641_p1 = krow_0_reg_249;

assign zext_ln36_3_fu_550_p1 = kchan_0_reg_206;

assign zext_ln36_4_fu_589_p1 = tmp_2_fu_581_p3;

assign zext_ln36_5_fu_601_p1 = tmp_3_fu_593_p3;

assign zext_ln36_6_fu_684_p1 = kcol_0_reg_296;

assign zext_ln36_7_fu_693_p1 = add_ln36_2_fu_688_p2;

assign zext_ln36_8_fu_747_p1 = add_ln36_4_fu_741_p2;

assign zext_ln36_fu_453_p1 = filters_reg_159;

assign zext_ln38_fu_534_p1 = add_ln38_fu_528_p2;

assign zext_ln48_1_fu_615_p1 = icol_reg_181;

assign zext_ln48_2_fu_624_p1 = add_ln48_1_fu_619_p2;

assign zext_ln48_fu_495_p1 = irow_reg_170;

always @ (posedge ap_clk) begin
    sext_ln18_reg_799[0] <= 1'b0;
    sub_ln18_2_reg_809[0] <= 1'b0;
    zext_ln36_1_reg_836[1:0] <= 2'b00;
    zext_ln36_1_reg_836[4] <= 1'b0;
    zext_ln31_reg_846[31:3] <= 29'b00000000000000000000000000000;
    tmp_13_cast_reg_859[1:0] <= 2'b00;
    zext_ln32_reg_864[31:3] <= 29'b00000000000000000000000000000;
    zext_ln38_reg_878[31:3] <= 29'b00000000000000000000000000000;
    sext_ln36_3_reg_896[0] <= 1'b0;
end

endmodule //convo
