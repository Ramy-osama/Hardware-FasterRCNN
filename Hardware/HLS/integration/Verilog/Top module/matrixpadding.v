// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrixpadding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matrix_input_address0,
        matrix_input_ce0,
        matrix_input_q0,
        matrix_paded_address0,
        matrix_paded_ce0,
        matrix_paded_we0,
        matrix_paded_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] matrix_input_address0;
output   matrix_input_ce0;
input  [31:0] matrix_input_q0;
output  [6:0] matrix_paded_address0;
output   matrix_paded_ce0;
output   matrix_paded_we0;
output  [31:0] matrix_paded_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_input_ce0;
reg matrix_paded_ce0;
reg matrix_paded_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_129_p2;
reg   [1:0] f_reg_299;
wire    ap_CS_fsm_state2;
wire   [4:0] zext_ln18_fu_143_p1;
reg   [4:0] zext_ln18_reg_304;
wire   [0:0] icmp_ln9_fu_123_p2;
wire  signed [6:0] sext_ln18_fu_177_p1;
reg  signed [6:0] sext_ln18_reg_309;
wire   [2:0] m_fu_187_p2;
reg   [2:0] m_reg_317;
wire    ap_CS_fsm_state3;
wire   [6:0] tmp_4_cast_fu_202_p3;
reg   [6:0] tmp_4_cast_reg_322;
wire   [0:0] icmp_ln11_fu_181_p2;
wire   [7:0] sub_ln18_1_fu_239_p2;
reg   [7:0] sub_ln18_1_reg_327;
wire   [2:0] n_fu_251_p2;
reg   [2:0] n_reg_335;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_245_p2;
wire   [7:0] add_ln18_3_fu_275_p2;
reg   [7:0] add_ln18_3_reg_345;
wire   [2:0] j_fu_280_p2;
reg   [2:0] j_reg_350;
wire   [2:0] i_fu_286_p2;
reg   [1:0] f_0_reg_67;
reg   [2:0] m_0_reg_78;
reg   [2:0] i_0_reg_89;
reg   [2:0] j_0_reg_101;
wire    ap_CS_fsm_state5;
reg   [2:0] n_0_reg_112;
wire   [63:0] zext_ln18_6_fu_266_p1;
wire   [63:0] zext_ln18_8_fu_292_p1;
wire   [3:0] tmp_fu_135_p3;
wire   [4:0] tmp_1_fu_147_p3;
wire   [2:0] tmp_2_fu_159_p3;
wire   [5:0] zext_ln18_1_fu_155_p1;
wire   [5:0] zext_ln18_2_fu_167_p1;
wire   [5:0] sub_ln18_fu_171_p2;
wire   [4:0] zext_ln18_3_fu_193_p1;
wire   [4:0] add_ln18_fu_197_p2;
wire   [6:0] zext_ln18_4_fu_210_p1;
wire   [6:0] add_ln18_1_fu_214_p2;
wire   [4:0] trunc_ln18_fu_219_p1;
wire   [7:0] p_shl2_cast_fu_223_p3;
wire   [7:0] p_shl3_cast_fu_231_p3;
wire   [6:0] zext_ln18_5_fu_257_p1;
wire   [6:0] add_ln18_2_fu_261_p2;
wire   [7:0] zext_ln18_7_fu_271_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_67 <= f_reg_299;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_67 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_89 <= 3'd1;
    end else if (((icmp_ln14_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_89 <= i_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_101 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_101 <= j_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_78 <= 3'd0;
    end else if (((icmp_ln14_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_78 <= m_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        n_0_reg_112 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n_0_reg_112 <= n_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln18_3_reg_345 <= add_ln18_3_fu_275_p2;
        j_reg_350 <= j_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_299 <= f_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_317 <= m_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_reg_335 <= n_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln18_reg_309[6 : 1] <= sext_ln18_fu_177_p1[6 : 1];
        zext_ln18_reg_304[3 : 2] <= zext_ln18_fu_143_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln18_1_reg_327[7 : 1] <= sub_ln18_1_fu_239_p2[7 : 1];
        tmp_4_cast_reg_322[6 : 2] <= tmp_4_cast_fu_202_p3[6 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        matrix_input_ce0 = 1'b1;
    end else begin
        matrix_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrix_paded_ce0 = 1'b1;
    end else begin
        matrix_paded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrix_paded_we0 = 1'b1;
    end else begin
        matrix_paded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_214_p2 = ($signed(zext_ln18_4_fu_210_p1) + $signed(sext_ln18_reg_309));

assign add_ln18_2_fu_261_p2 = (tmp_4_cast_reg_322 + zext_ln18_5_fu_257_p1);

assign add_ln18_3_fu_275_p2 = (sub_ln18_1_reg_327 + zext_ln18_7_fu_271_p1);

assign add_ln18_fu_197_p2 = (zext_ln18_3_fu_193_p1 + zext_ln18_reg_304);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign f_fu_129_p2 = (f_0_reg_67 + 2'd1);

assign i_fu_286_p2 = (i_0_reg_89 + 3'd1);

assign icmp_ln11_fu_181_p2 = ((m_0_reg_78 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_245_p2 = ((j_0_reg_101 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_123_p2 = ((f_0_reg_67 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_280_p2 = (j_0_reg_101 + 3'd1);

assign m_fu_187_p2 = (m_0_reg_78 + 3'd1);

assign matrix_input_address0 = zext_ln18_6_fu_266_p1;

assign matrix_paded_address0 = zext_ln18_8_fu_292_p1;

assign matrix_paded_d0 = matrix_input_q0;

assign n_fu_251_p2 = (n_0_reg_112 + 3'd1);

assign p_shl2_cast_fu_223_p3 = {{trunc_ln18_fu_219_p1}, {3'd0}};

assign p_shl3_cast_fu_231_p3 = {{add_ln18_1_fu_214_p2}, {1'd0}};

assign sext_ln18_fu_177_p1 = $signed(sub_ln18_fu_171_p2);

assign sub_ln18_1_fu_239_p2 = (p_shl2_cast_fu_223_p3 - p_shl3_cast_fu_231_p3);

assign sub_ln18_fu_171_p2 = (zext_ln18_1_fu_155_p1 - zext_ln18_2_fu_167_p1);

assign tmp_1_fu_147_p3 = {{f_0_reg_67}, {3'd0}};

assign tmp_2_fu_159_p3 = {{f_0_reg_67}, {1'd0}};

assign tmp_4_cast_fu_202_p3 = {{add_ln18_fu_197_p2}, {2'd0}};

assign tmp_fu_135_p3 = {{f_0_reg_67}, {2'd0}};

assign trunc_ln18_fu_219_p1 = add_ln18_1_fu_214_p2[4:0];

assign zext_ln18_1_fu_155_p1 = tmp_1_fu_147_p3;

assign zext_ln18_2_fu_167_p1 = tmp_2_fu_159_p3;

assign zext_ln18_3_fu_193_p1 = m_0_reg_78;

assign zext_ln18_4_fu_210_p1 = i_0_reg_89;

assign zext_ln18_5_fu_257_p1 = n_0_reg_112;

assign zext_ln18_6_fu_266_p1 = add_ln18_2_fu_261_p2;

assign zext_ln18_7_fu_271_p1 = j_0_reg_101;

assign zext_ln18_8_fu_292_p1 = add_ln18_3_reg_345;

assign zext_ln18_fu_143_p1 = tmp_fu_135_p3;

always @ (posedge ap_clk) begin
    zext_ln18_reg_304[1:0] <= 2'b00;
    zext_ln18_reg_304[4] <= 1'b0;
    sext_ln18_reg_309[0] <= 1'b0;
    tmp_4_cast_reg_322[1:0] <= 2'b00;
    sub_ln18_1_reg_327[0] <= 1'b0;
end

endmodule //matrixpadding
