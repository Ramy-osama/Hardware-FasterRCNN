// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixpadding,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.089000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=59,HLS_SYN_LUT=277,HLS_VERSION=2019_2}" *)

module matrixpadding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matrix_input_address0,
        matrix_input_ce0,
        matrix_input_q0,
        matrix_paded_address0,
        matrix_paded_ce0,
        matrix_paded_we0,
        matrix_paded_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] matrix_input_address0;
output   matrix_input_ce0;
input  [31:0] matrix_input_q0;
output  [6:0] matrix_paded_address0;
output   matrix_paded_ce0;
output   matrix_paded_we0;
output  [31:0] matrix_paded_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_input_ce0;
reg matrix_paded_ce0;
reg matrix_paded_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] f_fu_121_p2;
reg   [1:0] f_reg_277;
wire    ap_CS_fsm_state2;
wire  signed [5:0] sext_ln18_fu_149_p1;
reg  signed [5:0] sext_ln18_reg_282;
wire   [0:0] icmp_ln9_fu_115_p2;
wire   [4:0] add_ln18_fu_153_p2;
reg   [4:0] add_ln18_reg_287;
wire   [1:0] m_fu_165_p2;
reg   [1:0] m_reg_295;
wire    ap_CS_fsm_state3;
wire   [5:0] sub_ln18_1_fu_186_p2;
reg   [5:0] sub_ln18_1_reg_300;
wire   [0:0] icmp_ln11_fu_159_p2;
wire   [7:0] add_ln18_3_fu_217_p2;
reg   [7:0] add_ln18_3_reg_305;
wire   [1:0] n_fu_229_p2;
reg   [1:0] n_reg_313;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_223_p2;
wire   [7:0] add_ln18_5_fu_253_p2;
reg   [7:0] add_ln18_5_reg_323;
wire   [2:0] j_fu_258_p2;
reg   [2:0] j_reg_328;
wire   [2:0] i_fu_264_p2;
reg   [1:0] f_0_reg_59;
reg   [1:0] m_0_reg_70;
reg   [2:0] i_0_reg_81;
reg   [2:0] j_0_reg_93;
wire    ap_CS_fsm_state5;
reg   [1:0] n_0_reg_104;
wire   [63:0] zext_ln18_7_fu_244_p1;
wire   [63:0] zext_ln18_9_fu_270_p1;
wire   [3:0] tmp_fu_131_p3;
wire   [4:0] zext_ln18_1_fu_139_p1;
wire   [4:0] zext_ln18_fu_127_p1;
wire   [4:0] sub_ln18_fu_143_p2;
wire   [5:0] zext_ln18_2_fu_171_p1;
wire   [5:0] add_ln18_1_fu_175_p2;
wire   [5:0] shl_ln18_fu_180_p2;
wire   [4:0] zext_ln18_3_fu_192_p1;
wire   [4:0] add_ln18_2_fu_196_p2;
wire   [6:0] tmp_1_fu_205_p3;
wire   [7:0] zext_ln18_4_fu_201_p1;
wire   [7:0] zext_ln18_5_fu_213_p1;
wire   [5:0] zext_ln18_6_fu_235_p1;
wire   [5:0] add_ln18_4_fu_239_p2;
wire   [7:0] zext_ln18_8_fu_249_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_59 <= f_reg_277;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_59 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_81 <= 3'd1;
    end else if (((icmp_ln14_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_81 <= i_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_93 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_93 <= j_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_70 <= 2'd0;
    end else if (((icmp_ln14_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_70 <= m_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        n_0_reg_104 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n_0_reg_104 <= n_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_159_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln18_3_reg_305 <= add_ln18_3_fu_217_p2;
        sub_ln18_1_reg_300 <= sub_ln18_1_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln18_5_reg_323 <= add_ln18_5_fu_253_p2;
        j_reg_328 <= j_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln18_reg_287 <= add_ln18_fu_153_p2;
        sext_ln18_reg_282 <= sext_ln18_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_277 <= f_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_295 <= m_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_reg_313 <= n_fu_229_p2;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        matrix_input_ce0 = 1'b1;
    end else begin
        matrix_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrix_paded_ce0 = 1'b1;
    end else begin
        matrix_paded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrix_paded_we0 = 1'b1;
    end else begin
        matrix_paded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_175_p2 = ($signed(sext_ln18_reg_282) + $signed(zext_ln18_2_fu_171_p1));

assign add_ln18_2_fu_196_p2 = (add_ln18_reg_287 + zext_ln18_3_fu_192_p1);

assign add_ln18_3_fu_217_p2 = (zext_ln18_4_fu_201_p1 + zext_ln18_5_fu_213_p1);

assign add_ln18_4_fu_239_p2 = (sub_ln18_1_reg_300 + zext_ln18_6_fu_235_p1);

assign add_ln18_5_fu_253_p2 = (add_ln18_3_reg_305 + zext_ln18_8_fu_249_p1);

assign add_ln18_fu_153_p2 = (zext_ln18_fu_127_p1 + zext_ln18_1_fu_139_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign f_fu_121_p2 = (f_0_reg_59 + 2'd1);

assign i_fu_264_p2 = (i_0_reg_81 + 3'd1);

assign icmp_ln11_fu_159_p2 = ((m_0_reg_70 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_223_p2 = ((j_0_reg_93 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_115_p2 = ((f_0_reg_59 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_258_p2 = (j_0_reg_93 + 3'd1);

assign m_fu_165_p2 = (m_0_reg_70 + 2'd1);

assign matrix_input_address0 = zext_ln18_7_fu_244_p1;

assign matrix_paded_address0 = zext_ln18_9_fu_270_p1;

assign matrix_paded_d0 = matrix_input_q0;

assign n_fu_229_p2 = (n_0_reg_104 + 2'd1);

assign sext_ln18_fu_149_p1 = $signed(sub_ln18_fu_143_p2);

assign shl_ln18_fu_180_p2 = add_ln18_1_fu_175_p2 << 6'd2;

assign sub_ln18_1_fu_186_p2 = (shl_ln18_fu_180_p2 - add_ln18_1_fu_175_p2);

assign sub_ln18_fu_143_p2 = (zext_ln18_1_fu_139_p1 - zext_ln18_fu_127_p1);

assign tmp_1_fu_205_p3 = {{add_ln18_2_fu_196_p2}, {2'd0}};

assign tmp_fu_131_p3 = {{f_0_reg_59}, {2'd0}};

assign zext_ln18_1_fu_139_p1 = tmp_fu_131_p3;

assign zext_ln18_2_fu_171_p1 = m_0_reg_70;

assign zext_ln18_3_fu_192_p1 = i_0_reg_81;

assign zext_ln18_4_fu_201_p1 = add_ln18_2_fu_196_p2;

assign zext_ln18_5_fu_213_p1 = tmp_1_fu_205_p3;

assign zext_ln18_6_fu_235_p1 = n_0_reg_104;

assign zext_ln18_7_fu_244_p1 = add_ln18_4_fu_239_p2;

assign zext_ln18_8_fu_249_p1 = j_0_reg_93;

assign zext_ln18_9_fu_270_p1 = add_ln18_5_reg_323;

assign zext_ln18_fu_127_p1 = f_0_reg_59;

endmodule //matrixpadding
